[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QDesktopServices",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QWheelEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeyEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainterPath",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QTransform",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QWheelEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QCloseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "pydicom",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydicom",
        "description": "pydicom",
        "detail": "pydicom",
        "documentation": {}
    },
    {
        "label": "mritopng",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mritopng",
        "description": "mritopng",
        "detail": "mritopng",
        "documentation": {}
    },
    {
        "label": "GrayscaleImage",
        "importPath": "mritopng.models",
        "description": "mritopng.models",
        "isExtraImport": true,
        "detail": "mritopng.models",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsScene",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHeaderView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QOpenGLWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QToolBar",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QModelIndex",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPointF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "about_text",
        "importPath": "Strings",
        "description": "Strings",
        "isExtraImport": true,
        "detail": "Strings",
        "documentation": {}
    },
    {
        "label": "tip_text",
        "importPath": "Strings",
        "description": "Strings",
        "isExtraImport": true,
        "detail": "Strings",
        "documentation": {}
    },
    {
        "label": "FigureCanvasQTAgg",
        "importPath": "matplotlib.backends.backend_qt5agg",
        "description": "matplotlib.backends.backend_qt5agg",
        "isExtraImport": true,
        "detail": "matplotlib.backends.backend_qt5agg",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "matplotlib.figure",
        "description": "matplotlib.figure",
        "isExtraImport": true,
        "detail": "matplotlib.figure",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "data.Tumor",
        "description": "data.Tumor",
        "isExtraImport": true,
        "detail": "data.Tumor",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "data.Tumor",
        "description": "data.Tumor",
        "isExtraImport": true,
        "detail": "data.Tumor",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "isExtraImport": true,
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "isExtraImport": true,
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "isExtraImport": true,
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.layers.LayerWidget",
        "description": "ui.layers.LayerWidget",
        "isExtraImport": true,
        "detail": "ui.layers.LayerWidget",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "data.Layer",
        "description": "data.Layer",
        "isExtraImport": true,
        "detail": "data.Layer",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "data.Layer",
        "description": "data.Layer",
        "isExtraImport": true,
        "detail": "data.Layer",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "data.Layer",
        "description": "data.Layer",
        "isExtraImport": true,
        "detail": "data.Layer",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "data.Camera",
        "description": "data.Camera",
        "isExtraImport": true,
        "detail": "data.Camera",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.rendering.RenderingWidget",
        "description": "ui.rendering.RenderingWidget",
        "isExtraImport": true,
        "detail": "ui.rendering.RenderingWidget",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "OpenGL.GL",
        "description": "OpenGL.GL",
        "isExtraImport": true,
        "detail": "OpenGL.GL",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "data.common.LiveData",
        "description": "data.common.LiveData",
        "isExtraImport": true,
        "detail": "data.common.LiveData",
        "documentation": {}
    },
    {
        "label": "utils.O3dUtil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils.O3dUtil",
        "description": "utils.O3dUtil",
        "detail": "utils.O3dUtil",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "open3d",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "open3d",
        "description": "open3d",
        "detail": "open3d",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.layers.LayersFragment",
        "description": "ui.layers.LayersFragment",
        "isExtraImport": true,
        "detail": "ui.layers.LayersFragment",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.rendering.RenderingFragment",
        "description": "ui.rendering.RenderingFragment",
        "isExtraImport": true,
        "detail": "ui.rendering.RenderingFragment",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.dialogs.ChartDialog",
        "description": "ui.dialogs.ChartDialog",
        "isExtraImport": true,
        "detail": "ui.dialogs.ChartDialog",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.dialogs.AboutDialog",
        "description": "ui.dialogs.AboutDialog",
        "isExtraImport": true,
        "detail": "ui.dialogs.AboutDialog",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ui.dialogs.TipsDialog",
        "description": "ui.dialogs.TipsDialog",
        "isExtraImport": true,
        "detail": "ui.dialogs.TipsDialog",
        "documentation": {}
    },
    {
        "label": "LiveData",
        "kind": 6,
        "importPath": "data.common.LiveData",
        "description": "data.common.LiveData",
        "peekOfCode": "class LiveData:\n    \"\"\"\n    내부 값이 변경될때마다, 이 클래스를 관측하는 observer(함수/lambda)를 호출하여 콜백을 일으킨다.\n    Attributes:\n        value(Any): 현재 데이터\n        observers(list): 이 LiveData를 관측하는 함수/lambda의 리스트\n    Methods:\n        _set_value: 현재 데이터를 변경하고 콜백 촉발 (protected)\n        _publish: 현재 데이터를 변경하지 않고 콜백 촉발 (protected)\n        observe: 현재 데이터가 바뀔 때 촉발될 콜백 추가",
        "detail": "data.common.LiveData",
        "documentation": {}
    },
    {
        "label": "MutableLiveData",
        "kind": 6,
        "importPath": "data.common.LiveData",
        "description": "data.common.LiveData",
        "peekOfCode": "class MutableLiveData(LiveData):\n    \"\"\"\n    내부 data가 변경될때마다, 이 클래스를 observe하는 observer(함수/lambda)를 호출하여 콜백을 일으킨다.\n    Attributes:\n        value(Any): 현재 데이터\n        observers: 이 LiveData를 observe하는 함수/lambda의 리스트\n    Methods:\n        set_value: 현재 데이터를 수정하고, observer들을 호출하여 콜백을 일으킨다.\n        publish: 현재 데이터를 수정하지 않고 observer들을 호출하여 콜백을 일으킨다.\n    \"\"\"",
        "detail": "data.common.LiveData",
        "documentation": {}
    },
    {
        "label": "map",
        "kind": 2,
        "importPath": "data.common.LiveData",
        "description": "data.common.LiveData",
        "peekOfCode": "def map(source, t):\n    \"\"\"\n    한 가지의 livedata로부터 새 livedata를 파생한다. \n    Example usage: widthInCM = map(widthInInch, lambda: inch * 2.54)\n    Args:\n        source (LiveData): 참조할 기존 livedata\n        t (Callable[[Any], Any]): 변환 함수\n    Returns:\n        LiveData: 파생된 livedata\n    \"\"\"",
        "detail": "data.common.LiveData",
        "documentation": {}
    },
    {
        "label": "map2",
        "kind": 2,
        "importPath": "data.common.LiveData",
        "description": "data.common.LiveData",
        "peekOfCode": "def map2(source1, source2, t):\n    \"\"\"\n    두 가지의 livedata로부터 새 livedata를 파생한다. \n    Example usage: area = map(width, height: lambda: w, h: w*h)\n    Args:\n        source1 (LiveData): 참조할 기존 livedata\n        source2 (LiveData): 참조할 기존 livedata\n        t (Callable[[Any, Any], Any]): 변환 함수\n    Returns:\n        LiveData: 파생된 livedata",
        "detail": "data.common.LiveData",
        "documentation": {}
    },
    {
        "label": "map3",
        "kind": 2,
        "importPath": "data.common.LiveData",
        "description": "data.common.LiveData",
        "peekOfCode": "def map3(source1, source2, source3, t):\n    \"\"\"\n    3 가지의 livedata로부터 새 livedata를 파생한다. \n    Example usage: volume = map(width, height, depth: lambda: w, h, d: w*h*d)\n    Args:\n        source1 (LiveData): 참조할 기존 livedata\n        source2 (LiveData): 참조할 기존 livedata\n        source3 (LiveData): 참조할 기존 livedata\n        t (Callable[[Any, Any, Any], Any]): 변환 함수\n    Returns:",
        "detail": "data.common.LiveData",
        "documentation": {}
    },
    {
        "label": "Camera",
        "kind": 6,
        "importPath": "data.Camera",
        "description": "data.Camera",
        "peekOfCode": "class Camera:\n    \"\"\"\n    평면좌표계를 관측하는 가상의 카메라로, 좌표평면에서 관측되는 사각영역의 범위를 설정할 수 있다.\n    Attributes:\n        x0(float): 사각 영역의 left 좌표\n        y0(float): 사각 영역의 top 좌표\n        x1(float): 사각 영역의 right 좌표\n        y1(float): 사각 영역의 bottom 좌표\n        ratio(float): 사각 영역의 화면비(width/height)\n    Methods:",
        "detail": "data.Camera",
        "documentation": {}
    },
    {
        "label": "Layer",
        "kind": 6,
        "importPath": "data.Layer",
        "description": "data.Layer",
        "peekOfCode": "class Layer:\n    \"\"\" DICOM을 구성하는 한 시리즈(series)의 한 단면(layer)을 나타낸다\n    Attributes:\n        series(str): 이 layer를 포함하는 시리즈의 이름 (e.g. Gd Inhanced Axial)\n        study_date(date): 촬영일자(UTC+0)\n        birth_date(date): 환자 생년월일\n        pixel_spacing(list[float]): 이미지의 픽셀 간 물리적 거리 (dx=[0], dy=[1])\n        position(list[float]): 환자의 물리적 위치, x(L/R)=[0], y(A/P)=[1], z(H/F)=[2])\n        direction_row(list[float]): 이미지의 픽셀행(row)의 물리적(world) 방향벡터\n        direction_column(list[float]): 이미지의 픽셀열(column)의 물리적 방향벡터",
        "detail": "data.Layer",
        "documentation": {}
    },
    {
        "label": "TumorModelData",
        "kind": 6,
        "importPath": "data.Tumor",
        "description": "data.Tumor",
        "peekOfCode": "class TumorModelData:\n    \"\"\"\n    종양의 기본정보와 체적 및 point cloud를 포함한다.\n    Attributes:\n        points(list): 종양의 surface를 이루는 point cloud. [[x0, y0, z0], [x1, y1, z1], ...] (in cm)\n        volume(float): 종양의 계측된 체적 (in cm3)\n        date(datetime.date): 촬영일자\n        patient_birthday(datetime.date): 환자 생년월일\n    Methods:\n        from_tumor_model_data(classmethod): TumorModelData로부터 TumorModel을 생성한다.",
        "detail": "data.Tumor",
        "documentation": {}
    },
    {
        "label": "TumorModel",
        "kind": 6,
        "importPath": "data.Tumor",
        "description": "data.Tumor",
        "peekOfCode": "class TumorModel:\n    \"\"\"\n    종양의 기본정보와 체적 및 3D mesh를 포함한다.\n    Attributes:\n        mesh(TriangleMesh): 종양의 surface를 나타내는 mesh\n        volume(float): 종양의 계측된 체적 (in cm3)\n        date(datetime.date): 촬영일자\n        patient_birthday(datetime.date): 환자 생년월일\n    \"\"\"\n    def __init__(self, mesh, volume, date, patient_birthday):",
        "detail": "data.Tumor",
        "documentation": {}
    },
    {
        "label": "AboutDialog",
        "kind": 6,
        "importPath": "ui.dialogs.AboutDialog",
        "description": "ui.dialogs.AboutDialog",
        "peekOfCode": "class AboutDialog(QDialog):\n    \"\"\"\n    어플리케이션 정보를 보여주는 간단한 대화상자 \n    A simple dialog that displays App information such as...\n    - 어플리케이션 이름과 버젼(Application name and version)\n    - 어플리케이션의 개발 목적(The purpose of the aplication)\n    - 주의사항과 면책공고(The cautions and disclaimer)\n    - 저작권과 개발자 연락처(The copyright and contact information of the developer)\n    \"\"\"\n    # Copyright (c) 2023 Sung Won Jo",
        "detail": "ui.dialogs.AboutDialog",
        "documentation": {}
    },
    {
        "label": "ChartDialog",
        "kind": 6,
        "importPath": "ui.dialogs.ChartDialog",
        "description": "ui.dialogs.ChartDialog",
        "peekOfCode": "class ChartDialog(QDialog):\n    \"\"\"\n    종양 모델 리스트를 입력받고, 성장 패턴을 그래프(plot)로 보여주는 대화상자\n    좌측 그래프: 시간에 따른 종양의 체적\n    우측 그래프: 시간에 따른 종양의 성장률(체적의 증가율)\n    Attributes:\n        tumor_models(list[TumorModel]): 시간대순(오름차순)으로 정렬된 종양 모델 리스트\n        figure(Figure): matplotlib의 GUI 객체 \n        canvas(FigureCanvas): matplotlib의 그리기 화면\n        axes1(Axes): 시간-체적 그래프",
        "detail": "ui.dialogs.ChartDialog",
        "documentation": {}
    },
    {
        "label": "TipsDialog",
        "kind": 6,
        "importPath": "ui.dialogs.TipsDialog",
        "description": "ui.dialogs.TipsDialog",
        "peekOfCode": "class TipsDialog(QDialog):\n    \"\"\"\n    어플리케이션 사용법을 알려주는 간단한 대화상자\n    A simple dialog that displays App instruction\n    \"\"\"\n    # Copyright (c) 2023 Sung Won Jo\n    # For more details: https://github.com/waterbottle54/tumor_simulator\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Tips\")",
        "detail": "ui.dialogs.TipsDialog",
        "documentation": {}
    },
    {
        "label": "LayersFragment",
        "kind": 6,
        "importPath": "ui.layers.LayersFragment",
        "description": "ui.layers.LayersFragment",
        "peekOfCode": "class LayersFragment(QWidget):\n    \"\"\"\n    view model의 현재 Layer(image & 종양 경계)를 보여주는 화면\n    - series, layer를 탐색하고, layer 위에 종양의 경계를 마킹할 수 있다.\n    Attributes:\n        view_model(ViewModel): 뷰모델\n        layout_top(QVBoxLayout): 최상위 레이아웃\n        layer_widget(LayerWidget): layer를 그리는 위젯\n        data_widget(QWidget): series_label, volume_label이 배치되는 위젯\n        series_label(QLabel): 현재 탐색중인 series 제목을 표시하는 label",
        "detail": "ui.layers.LayersFragment",
        "documentation": {}
    },
    {
        "label": "LayerWidget",
        "kind": 6,
        "importPath": "ui.layers.LayerWidget",
        "description": "ui.layers.LayerWidget",
        "peekOfCode": "class LayerWidget(QGraphicsView):\n    \"\"\"\n    입력받은 Layer(영상 단면)의 이미지와 종양 경계를 화면에 표시한다.\n    Attributes:\n        layer: 위젯에 표시할 Layer 객체\n        camera: 유저가 layer에서 관측가능한 사각영역을 관리하는 객체\n        right_mouse: 우측 버튼 drag 진행 여부\n        left_mouse: 좌측 버튼 drag 진행 여부\n        on_drag: 마우스 drag 감지 시 호출되는 콜백\n        on_hover: 마우스 hovering 감지 시 호출되는 콜백",
        "detail": "ui.layers.LayerWidget",
        "documentation": {}
    },
    {
        "label": "RenderingFragment",
        "kind": 6,
        "importPath": "ui.rendering.RenderingFragment",
        "description": "ui.rendering.RenderingFragment",
        "peekOfCode": "class RenderingFragment(QWidget):\n    \"\"\"\n    view model의 3D 종양 모델을 렌더링하는 화면\n    - 비교군 list를 표시하고 불러올 수 있다.\n    Attributes:\n        view_model(ViewModel): 뷰모델\n        layout(QVBoxLayout): 최상위 레이아웃\n        rendering_widget(RenderingWidget): 3D 렌더링 위젯\n        tumor_table(QTableWidget): 비교군 list를 표시하는 위젯\n    Methods:",
        "detail": "ui.rendering.RenderingFragment",
        "documentation": {}
    },
    {
        "label": "RenderingWidget",
        "kind": 6,
        "importPath": "ui.rendering.RenderingWidget",
        "description": "ui.rendering.RenderingWidget",
        "peekOfCode": "class RenderingWidget(QOpenGLWidget):\n    \"\"\"\n    입력받은 mesh를 렌더링하는 위젯.\n    - OpenGL perspective projection을 적용한다.\n    - 드래그를 인식해 mesh의 회전, scale을 조정한다.\n    Attributes:\n        mesh (TriangleMesh):    렌더링할 mesh\n        mouse_latest(NDArray):  드래그 마지막 위치.(x=[0], y=[1])\n        rotation(NDArray):      mesh 적용될 3D rotation matrix (4 x 4)\n        scale(float):           mesh 적용될 scale 배율. 확대(>1), 축소(<1)",
        "detail": "ui.rendering.RenderingWidget",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class Event: pass\nclass ShowMessage(Event):\n    def __init__(self, message):\n        self.message = message\nclass PromptDicomFiles(Event): pass\nclass PromptOpenFile(Event): pass\nclass PromptSaveFile(Event): pass\nclass ConfirmNewFile(Event): pass\nclass ConfirmDeleteSeries(Event):\n    def __init__(self, series, any_point):",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "ShowMessage",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class ShowMessage(Event):\n    def __init__(self, message):\n        self.message = message\nclass PromptDicomFiles(Event): pass\nclass PromptOpenFile(Event): pass\nclass PromptSaveFile(Event): pass\nclass ConfirmNewFile(Event): pass\nclass ConfirmDeleteSeries(Event):\n    def __init__(self, series, any_point):\n        self.series = series",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "PromptDicomFiles",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class PromptDicomFiles(Event): pass\nclass PromptOpenFile(Event): pass\nclass PromptSaveFile(Event): pass\nclass ConfirmNewFile(Event): pass\nclass ConfirmDeleteSeries(Event):\n    def __init__(self, series, any_point):\n        self.series = series\n        self.any_point = any_point\nclass PromptExportModel(Event): pass\nclass PromptOpenModels(Event): pass",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "PromptOpenFile",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class PromptOpenFile(Event): pass\nclass PromptSaveFile(Event): pass\nclass ConfirmNewFile(Event): pass\nclass ConfirmDeleteSeries(Event):\n    def __init__(self, series, any_point):\n        self.series = series\n        self.any_point = any_point\nclass PromptExportModel(Event): pass\nclass PromptOpenModels(Event): pass\nclass ShowGrowthPattern(Event):",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "PromptSaveFile",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class PromptSaveFile(Event): pass\nclass ConfirmNewFile(Event): pass\nclass ConfirmDeleteSeries(Event):\n    def __init__(self, series, any_point):\n        self.series = series\n        self.any_point = any_point\nclass PromptExportModel(Event): pass\nclass PromptOpenModels(Event): pass\nclass ShowGrowthPattern(Event):\n    def __init__(self, tumor_models):",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "ConfirmNewFile",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class ConfirmNewFile(Event): pass\nclass ConfirmDeleteSeries(Event):\n    def __init__(self, series, any_point):\n        self.series = series\n        self.any_point = any_point\nclass PromptExportModel(Event): pass\nclass PromptOpenModels(Event): pass\nclass ShowGrowthPattern(Event):\n    def __init__(self, tumor_models):\n        self.tumor_models = tumor_models",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "ConfirmDeleteSeries",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class ConfirmDeleteSeries(Event):\n    def __init__(self, series, any_point):\n        self.series = series\n        self.any_point = any_point\nclass PromptExportModel(Event): pass\nclass PromptOpenModels(Event): pass\nclass ShowGrowthPattern(Event):\n    def __init__(self, tumor_models):\n        self.tumor_models = tumor_models\nclass ConfirmExit(Event): pass",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "PromptExportModel",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class PromptExportModel(Event): pass\nclass PromptOpenModels(Event): pass\nclass ShowGrowthPattern(Event):\n    def __init__(self, tumor_models):\n        self.tumor_models = tumor_models\nclass ConfirmExit(Event): pass\nclass TerminateApp(Event): pass\nclass ViewModel(QObject):\n    event = pyqtSignal(Event)\n    current_filename = MutableLiveData(None)",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "PromptOpenModels",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class PromptOpenModels(Event): pass\nclass ShowGrowthPattern(Event):\n    def __init__(self, tumor_models):\n        self.tumor_models = tumor_models\nclass ConfirmExit(Event): pass\nclass TerminateApp(Event): pass\nclass ViewModel(QObject):\n    event = pyqtSignal(Event)\n    current_filename = MutableLiveData(None)\n    current_world_position = MutableLiveData(None)",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "ShowGrowthPattern",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class ShowGrowthPattern(Event):\n    def __init__(self, tumor_models):\n        self.tumor_models = tumor_models\nclass ConfirmExit(Event): pass\nclass TerminateApp(Event): pass\nclass ViewModel(QObject):\n    event = pyqtSignal(Event)\n    current_filename = MutableLiveData(None)\n    current_world_position = MutableLiveData(None)\n    layer_map: MutableLiveData = MutableLiveData(dict())",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "ConfirmExit",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class ConfirmExit(Event): pass\nclass TerminateApp(Event): pass\nclass ViewModel(QObject):\n    event = pyqtSignal(Event)\n    current_filename = MutableLiveData(None)\n    current_world_position = MutableLiveData(None)\n    layer_map: MutableLiveData = MutableLiveData(dict())\n    series: MutableLiveData = MutableLiveData(None)\n    position: MutableLiveData = MutableLiveData(0)\n    layer: LiveData",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "TerminateApp",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class TerminateApp(Event): pass\nclass ViewModel(QObject):\n    event = pyqtSignal(Event)\n    current_filename = MutableLiveData(None)\n    current_world_position = MutableLiveData(None)\n    layer_map: MutableLiveData = MutableLiveData(dict())\n    series: MutableLiveData = MutableLiveData(None)\n    position: MutableLiveData = MutableLiveData(0)\n    layer: LiveData\n    series_description: LiveData",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "ViewModel",
        "kind": 6,
        "importPath": "ui.ViewModel",
        "description": "ui.ViewModel",
        "peekOfCode": "class ViewModel(QObject):\n    event = pyqtSignal(Event)\n    current_filename = MutableLiveData(None)\n    current_world_position = MutableLiveData(None)\n    layer_map: MutableLiveData = MutableLiveData(dict())\n    series: MutableLiveData = MutableLiveData(None)\n    position: MutableLiveData = MutableLiveData(0)\n    layer: LiveData\n    series_description: LiveData\n    area: LiveData",
        "detail": "ui.ViewModel",
        "documentation": {}
    },
    {
        "label": "reconstruct_surface",
        "kind": 2,
        "importPath": "utils.O3dUtil",
        "description": "utils.O3dUtil",
        "peekOfCode": "def reconstruct_surface(points):\n    # build mesh object\n    points = np.array(points)\n    point_cloud = o3d.geometry.PointCloud()\n    point_cloud.points = o3d.utility.Vector3dVector(points)\n    point_cloud.estimate_normals()\n    point_cloud.orient_normals_towards_camera_location(point_cloud.get_center())\n    point_cloud.normals = o3d.utility.Vector3dVector( - np.asarray(point_cloud.normals))\n    mesh = o3d.geometry.TriangleMesh.create_from_point_cloud_poisson(point_cloud, depth=7, width=0, scale=1.1, linear_fit=False)[0]\n    mesh = mesh.simplify_quadric_decimation(1000)",
        "detail": "utils.O3dUtil",
        "documentation": {}
    },
    {
        "label": "get_LUT_value",
        "kind": 2,
        "importPath": "utils.pydicom_PIL",
        "description": "utils.pydicom_PIL",
        "peekOfCode": "def get_LUT_value(data, window, level):\n    \"\"\"Apply the RGB Look-Up Table for the given\n       data and window/level value.\"\"\"\n    if not have_numpy:\n        raise ImportError(\"Numpy is not available.\"\n                          \"See http://numpy.scipy.org/\"\n                          \"to download and install\")\n    return np.piecewise(data,\n                        [data <= (level - 0.5 - (window - 1) / 2),\n                         data > (level - 0.5 + (window - 1) / 2)],",
        "detail": "utils.pydicom_PIL",
        "documentation": {}
    },
    {
        "label": "get_PIL_image",
        "kind": 2,
        "importPath": "utils.pydicom_PIL",
        "description": "utils.pydicom_PIL",
        "peekOfCode": "def get_PIL_image(dataset):\n    \"\"\"Get Image object from Python Imaging Library(PIL)\"\"\"\n    if not have_PIL:\n        raise ImportError(\"Python Imaging Library is not available. \"\n                          \"See http://www.pythonware.com/products/pil/ \"\n                          \"to download and install\")\n    if ('PixelData' not in dataset):\n        raise TypeError(\"Cannot show image -- DICOM dataset does not have \"\n                        \"pixel data\")\n    # can only apply LUT if these window info exists",
        "detail": "utils.pydicom_PIL",
        "documentation": {}
    },
    {
        "label": "show_PIL",
        "kind": 2,
        "importPath": "utils.pydicom_PIL",
        "description": "utils.pydicom_PIL",
        "peekOfCode": "def show_PIL(dataset):\n    \"\"\"Display an image using the Python Imaging Library (PIL)\"\"\"\n    im = get_PIL_image(dataset)\n    im.show()",
        "detail": "utils.pydicom_PIL",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "App",
        "description": "App",
        "peekOfCode": "class MainWindow(QMainWindow):\n    \"\"\"\n    Attributes:\n        view_model(ViewModel): 뷰모델 (poject-level)\n        layout_top(QHBoxLayout): 최상위 레이아웃\n        layers_fragment(LayersFragment): 단층(layer) 탐색 화면 - 화면 좌측\n        rendering_fragment(RenderingFragment): 종양(3D) 렌더링 화면 - 화면 우측\n    Methods:\n        setup_menu: 메뉴를 초기화한다. (계층도는 함수 doc 참조)\n        setup_toolbar: 툴바를 초기화한다.",
        "detail": "App",
        "documentation": {}
    },
    {
        "label": "about_text",
        "kind": 5,
        "importPath": "Strings",
        "description": "Strings",
        "peekOfCode": "about_text = \"\"\"\nBrain Tumor Simulator 1.0\nPurpose: Tumor volume measurement, comparison, and analysis\nDisclaimer: This software is not intended to replace professional medical diagnosis.\nCopyright 2023. Sung Won Jo. All rights reserved.\nContact: waterbottle54@naver.com\n\"\"\"\n#==================================== Tip Text ==========================================\n# Used in TipsDialog.py\ntip_text = \"\"\"",
        "detail": "Strings",
        "documentation": {}
    },
    {
        "label": "tip_text",
        "kind": 5,
        "importPath": "Strings",
        "description": "Strings",
        "peekOfCode": "tip_text = \"\"\"\nZoom Image: \\t Ctrl + Mouse Wheel\nMove Focus: \\t Right Drag\nMark Tumor: \\t Left Drag\nChange Layer: \\t Mouse Wheel\nSkip Layers: \\t Page Up / Page Down\nSkip All Layers: \\t Home / End\nZoom 3D Tumor: \\t Mouse Wheel\nRotate 3D Tumor: \\t Mouse Drag\n* Import folder that directly contains DICOM files.",
        "detail": "Strings",
        "documentation": {}
    }
]